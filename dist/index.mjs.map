{"version":3,"file":"index.mjs","sources":["../lib/index.ts"],"sourcesContent":["import {\n  S3Client,\n  DeleteObjectCommand,\n  GetObjectCommand,\n  PutObjectCommand,\n  ObjectCannedACL,\n  S3ClientConfig,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as getS3SignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\ntype StrapiFile = {\n  path: string;\n  folderPath: string;\n  hash: string;\n  ext: string;\n  mime: string;\n  buffer: WithImplicitCoercion<string>;\n  stream: string;\n  url: string;\n};\n\ninterface PluginConfig extends S3ClientConfig {\n  cloudflarePublicAccessUrl?: string;\n  pool?: boolean;\n  params: {\n    Bucket: string;\n    ACL: ObjectCannedACL;\n    Location?: string;\n  };\n}\n\nconst removeLeadingSlash = (str: string) => {\n  return str.replace(/^\\//, \"\");\n};\n\nconst getPathKey = (file: StrapiFile, pool = false) => {\n  const filePath = file.path ? `${file.path}/` : \"\";\n  let path = filePath;\n  if (!pool) {\n    path =\n      file.folderPath && file.folderPath !== \"/\"\n        ? `${removeLeadingSlash(file.folderPath)}/${filePath}`\n        : filePath;\n  }\n\n  const Key = `${path}${file.hash}${file.ext}`;\n  return { path, Key };\n};\n\nconst assertUrlProtocol = (url: string) => {\n  // Regex to test protocol like \"http://\", \"https://\"\n  return /^\\w*:\\/\\//.test(url);\n};\n\nexport default {\n  init: (config: PluginConfig) => {\n    const S3 = new S3Client({\n      ...config,\n      region: config.region || \"auto\",\n    });\n\n    if (!config.cloudflarePublicAccessUrl) {\n      process.emitWarning(\n        \"\\x1b[43mWARNING (strapi-provider-cloudflare-r2):\\x1b[0m the provider config requires cloudflarePublicAccessUrl to upload files larger than 5MB. See more: https://github.com/trieb-work/strapi-provider-cloudflare-r2#provider-configuration\"\n      );\n    }\n\n    const aws_keys = Object.keys(process.env).filter((key) =>\n      key.startsWith(\"AWS_\")\n    );\n    if (aws_keys.length > 0) {\n      console.warn(\n        `\\x1b[43mWARNING (strapi-provider-cloudflare-r2):\\x1b[0m You are using strapi-provider-cloudflare-r2 and still have AWS_... env vars from provider-upload-aws-s3 set. This could conflict with Cloudflare R2 provider. Please remove ${aws_keys.join(\n          \", \"\n        )} env variable(s) or rename+change them in plugin config. See more: https://github.com/trieb-work/strapi-provider-cloudflare-r2#aws-sdk-configuration-and-aws_-env-variables`\n      );\n    }\n\n    const getFileURL = async (file: StrapiFile): Promise<string> => {\n      const { Key } = getPathKey(file);\n      if (config.cloudflarePublicAccessUrl) {\n        return config.cloudflarePublicAccessUrl.replace(/\\/$/g, \"\") + \"/\" + Key;\n      } else if (config.params.ACL === \"private\") {\n        return getS3SignedUrl(\n          S3,\n          new GetObjectCommand({ Bucket: config?.params?.Bucket, Key }),\n          { expiresIn: 3600 }\n        ) as Promise<string>;\n      } else if (config.region !== \"auto\") {\n        return config.params.Location + \"/\" + Key;\n      }\n      throw new Error(\n        \"Cloudflare S3 API returned no file location and cloudflarePublicAccessUrl is not set. strapi-provider-cloudflare-r2 requires cloudflarePublicAccessUrl to upload files larger than 5MB. https://github.com/trieb-work/strapi-provider-cloudflare-r2#provider-configuration\"\n      );\n    };\n\n    const upload = async (file: StrapiFile, customParams = {}) => {\n      const { Key } = getPathKey(file, config.pool);\n      const Body = file.stream || Buffer.from(file.buffer, \"binary\");\n      try {\n        await S3.send(\n          new PutObjectCommand({\n            Bucket: config.params.Bucket,\n            ACL: config.params.ACL,\n            Key,\n            Body,\n            ContentType: file.mime,\n            ...customParams,\n          })\n        );\n      } catch (error) {\n        console.log(\"An error occurred while uploading the file\", error);\n      }\n    };\n\n    const _delete = async (file: StrapiFile, customParams = {}) => {\n      const { Key } = getPathKey(file, config.pool);\n      try {\n        await S3.send(\n          new DeleteObjectCommand({\n            Bucket: config.params.Bucket,\n            Key,\n            ...customParams,\n          })\n        );\n      } catch (error) {\n        console.log(\"An error occurred while deleting the file\", error);\n      }\n    };\n\n    const getSignedUrl = async (file: StrapiFile) => {\n      const { Key } = getPathKey(file, config.pool);\n      try {\n        const url = await getS3SignedUrl(\n          S3,\n          new GetObjectCommand({ Bucket: config?.params?.Bucket, Key }),\n          { expiresIn: 3600 }\n        );\n        return { url };\n      } catch (error) {\n        console.log(\"An error occurred while generating the signed URL\", error);\n      }\n    };\n\n    const isPrivate = async () => {\n      return config.params.ACL === \"private\";\n    };\n\n    return {\n      uploadStream: upload,\n      upload,\n      delete: _delete,\n      getSignedUrl,\n      isPrivate,\n    };\n  },\n};\n"],"names":["getSignedUrl","getS3SignedUrl"],"mappings":";;AA+BA,MAAM,qBAAqB,CAAC,QAAgB;AACnC,SAAA,IAAI,QAAQ,OAAO,EAAE;AAC9B;AAEA,MAAM,aAAa,CAAC,MAAkB,OAAO,UAAU;AACrD,QAAM,WAAW,KAAK,OAAO,GAAG,KAAK,IAAI,MAAM;AAC/C,MAAI,OAAO;AACX,MAAI,CAAC,MAAM;AACT,WACE,KAAK,cAAc,KAAK,eAAe,MACnC,GAAG,mBAAmB,KAAK,UAAU,CAAC,IAAI,QAAQ,KAClD;AAAA,EACR;AAEM,QAAA,MAAM,GAAG,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AACnC,SAAA,EAAE,MAAM;AACjB;AAOA,MAAe,QAAA;AAAA,EACb,MAAM,CAAC,WAAyB;AACxB,UAAA,KAAK,IAAI,SAAS;AAAA,MACtB,GAAG;AAAA,MACH,QAAQ,OAAO,UAAU;AAAA,IAAA,CAC1B;AAEG,QAAA,CAAC,OAAO,2BAA2B;AAC7B,cAAA;AAAA,QACN;AAAA,MAAA;AAAA,IAEJ;AAEA,UAAM,WAAW,OAAO,KAAK,QAAQ,GAAG,EAAE;AAAA,MAAO,CAAC,QAChD,IAAI,WAAW,MAAM;AAAA,IAAA;AAEnB,QAAA,SAAS,SAAS,GAAG;AACf,cAAA;AAAA,QACN,uOAAuO,SAAS;AAAA,UAC9O;AAAA,QACD,CAAA;AAAA,MAAA;AAAA,IAEL;AAoBA,UAAM,SAAS,OAAO,MAAkB,eAAe,CAAA,MAAO;AAC5D,YAAM,EAAE,IAAI,IAAI,WAAW,MAAM,OAAO,IAAI;AAC5C,YAAM,OAAO,KAAK,UAAU,OAAO,KAAK,KAAK,QAAQ,QAAQ;AACzD,UAAA;AACF,cAAM,GAAG;AAAA,UACP,IAAI,iBAAiB;AAAA,YACnB,QAAQ,OAAO,OAAO;AAAA,YACtB,KAAK,OAAO,OAAO;AAAA,YACnB;AAAA,YACA;AAAA,YACA,aAAa,KAAK;AAAA,YAClB,GAAG;AAAA,UAAA,CACJ;AAAA,QAAA;AAAA,eAEI,OAAO;AACN,gBAAA,IAAI,8CAA8C,KAAK;AAAA,MACjE;AAAA,IAAA;AAGF,UAAM,UAAU,OAAO,MAAkB,eAAe,CAAA,MAAO;AAC7D,YAAM,EAAE,IAAI,IAAI,WAAW,MAAM,OAAO,IAAI;AACxC,UAAA;AACF,cAAM,GAAG;AAAA,UACP,IAAI,oBAAoB;AAAA,YACtB,QAAQ,OAAO,OAAO;AAAA,YACtB;AAAA,YACA,GAAG;AAAA,UAAA,CACJ;AAAA,QAAA;AAAA,eAEI,OAAO;AACN,gBAAA,IAAI,6CAA6C,KAAK;AAAA,MAChE;AAAA,IAAA;AAGI,UAAAA,iBAAe,OAAO,SAAqB;AAC/C,YAAM,EAAE,IAAI,IAAI,WAAW,MAAM,OAAO,IAAI;AACxC,UAAA;AACF,cAAM,MAAM,MAAMC;AAAAA,UAChB;AAAA,UACA,IAAI,iBAAiB,EAAE,QAAQ,QAAQ,QAAQ,QAAQ,KAAK;AAAA,UAC5D,EAAE,WAAW,KAAK;AAAA,QAAA;AAEpB,eAAO,EAAE,IAAI;AAAA,eACN,OAAO;AACN,gBAAA,IAAI,qDAAqD,KAAK;AAAA,MACxE;AAAA,IAAA;AAGF,UAAM,YAAY,YAAY;AACrB,aAAA,OAAO,OAAO,QAAQ;AAAA,IAAA;AAGxB,WAAA;AAAA,MACL,cAAc;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,MAAA,cACRD;AAAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AACF;"}